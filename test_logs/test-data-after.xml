<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="38" skipped="156" tests="624" time="5.043" timestamp="2023-03-01T08:47:51.523283" hostname="Gabriels-MacBook-Pro.local"><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(DataFrame,DataFrame)-left]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(DataFrame,DataFrame)-right]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[add-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function add&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(Series,DataFrame)-left]" time="0.008"><skipped type="pytest.xfail" message="&lt;built-in function add&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(Series,DataFrame)-right]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function add&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[add-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(int,Series)-right]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(DataFrame,int)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(Series,Series)-left]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(DataFrame,DataFrame)-left]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[radd-(DataFrame,DataFrame)-left]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'left', all_binary_operators = &lt;function radd at 0x7fb91b30c670&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(DataFrame,DataFrame)-right]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;function radd at 0x7fb91b30c670&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(DataFrame,Series)-left]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;function radd at 0x7fb91b30c670&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[radd-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(DataFrame,DataFrame)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(DataFrame,DataFrame)-right]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[sub-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function sub&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(Series,DataFrame)-left]" time="0.006"><skipped type="pytest.xfail" message="&lt;built-in function sub&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(Series,DataFrame)-right]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(Series,DataFrame)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function sub&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[sub-(DataFrame,Series)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(DataFrame,DataFrame)-left]" time="0.005"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[rsub-(DataFrame,DataFrame)-left]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'left', all_binary_operators = &lt;function rsub at 0x7fb91b30c700&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(DataFrame,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;function rsub at 0x7fb91b30c700&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(Series,DataFrame)-right]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(Series,DataFrame)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(DataFrame,Series)-left]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;function rsub at 0x7fb91b30c700&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rsub-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(DataFrame,DataFrame)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(DataFrame,DataFrame)-right]" time="0.005"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[mul-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function mul&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(DataFrame,DataFrame)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(Series,DataFrame)-left]" time="0.006"><skipped type="pytest.xfail" message="&lt;built-in function mul&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(DataFrame,Series)-left]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(DataFrame,Series)-right]" time="0.006"><skipped type="pytest.xfail" message="&lt;built-in function mul&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mul-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(int,Series)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(DataFrame,DataFrame)-left]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[rmul-(DataFrame,DataFrame)-left]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'left', all_binary_operators = &lt;function rmul at 0x7fb91b30c790&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(DataFrame,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(Series,DataFrame)-left]" time="0.006"><skipped type="pytest.xfail" message="&lt;function rmul at 0x7fb91b30c790&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(Series,DataFrame)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(DataFrame,Series)-left]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;function rmul at 0x7fb91b30c790&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmul-(DataFrame,Series)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(int,DataFrame)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(DataFrame,DataFrame)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(DataFrame,DataFrame)-right]" time="0.005"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[truediv-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function truediv&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function truediv&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(DataFrame,Series)-left]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(DataFrame,Series)-right]" time="0.006"><skipped type="pytest.xfail" message="&lt;built-in function truediv&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[truediv-(DataFrame,Series)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(int,Series)-right]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(DataFrame,int)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(DataFrame,DataFrame)-left]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[rtruediv-(DataFrame,DataFrame)-left]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'left'
all_binary_operators = &lt;function rtruediv at 0x7fb91b30c8b0&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(DataFrame,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;function rtruediv at 0x7fb91b30c8b0&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(Series,DataFrame)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(DataFrame,Series)-left]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(DataFrame,Series)-right]" time="0.006"><skipped type="pytest.xfail" message="&lt;function rtruediv at 0x7fb91b30c8b0&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rtruediv-(DataFrame,Series)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(int,Series)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(DataFrame,DataFrame)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(DataFrame,DataFrame)-right]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[floordiv-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function floordiv&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function floordiv&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function floordiv&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[floordiv-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(DataFrame,DataFrame)-left]" time="0.008"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[rfloordiv-(DataFrame,DataFrame)-left]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'left'
all_binary_operators = &lt;function rfloordiv at 0x7fb91b30c940&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(DataFrame,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;function rfloordiv at 0x7fb91b30c940&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(DataFrame,Series)-right]" time="0.006"><skipped type="pytest.xfail" message="&lt;function rfloordiv at 0x7fb91b30c940&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rfloordiv-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(int,Series)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(DataFrame,DataFrame)-left]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(DataFrame,DataFrame)-right]" time="0.005"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[mod-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function mod&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function mod&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(DataFrame,Series)-right]" time="0.006"><skipped type="pytest.xfail" message="&lt;built-in function mod&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[mod-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(DataFrame,int)-both]" time="0.057" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(DataFrame,DataFrame)-left]" time="0.005"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[rmod-(DataFrame,DataFrame)-left]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'left', all_binary_operators = &lt;function rmod at 0x7fb91b30c9d0&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(DataFrame,DataFrame)-right]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;function rmod at 0x7fb91b30c9d0&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(Series,DataFrame)-right]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(DataFrame,Series)-left]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(DataFrame,Series)-right]" time="0.006"><skipped type="pytest.xfail" message="&lt;function rmod at 0x7fb91b30c9d0&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rmod-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(int,DataFrame)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(DataFrame,DataFrame)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(DataFrame,DataFrame)-right]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[pow-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function pow&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(Series,DataFrame)-left]" time="0.006"><skipped type="pytest.xfail" message="&lt;built-in function pow&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(Series,DataFrame)-right]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(Series,DataFrame)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function pow&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[pow-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(DataFrame,DataFrame)-left]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[rpow-(DataFrame,DataFrame)-left]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'left', all_binary_operators = &lt;function rpow at 0x7fb91b30caf0&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(DataFrame,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(DataFrame,DataFrame)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;function rpow at 0x7fb91b30caf0&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(Series,DataFrame)-right]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;function rpow at 0x7fb91b30caf0&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rpow-(DataFrame,Series)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(DataFrame,int)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(Series,Series)-right]" time="0.002"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[eq-(Series,Series)-right]&gt;&gt;, args = (0    1
dtype: int64, 0    1
dtype: int64), annotate = 'right', all_binary_operators = &lt;built-in function eq&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(DataFrame,DataFrame)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(DataFrame,DataFrame)-right]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[eq-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function eq&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function eq&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function eq&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[eq-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(Series,Series)-right]" time="0.002"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[ne-(Series,Series)-right]&gt;&gt;, args = (0    1
dtype: int64, 0    1
dtype: int64), annotate = 'right', all_binary_operators = &lt;built-in function ne&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(DataFrame,DataFrame)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(DataFrame,DataFrame)-right]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[ne-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function ne&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function ne&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function ne&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ne-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(DataFrame,int)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(Series,Series)-right]" time="0.002"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[lt-(Series,Series)-right]&gt;&gt;, args = (0    1
dtype: int64, 0    1
dtype: int64), annotate = 'right', all_binary_operators = &lt;built-in function lt&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(DataFrame,DataFrame)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(DataFrame,DataFrame)-right]" time="0.005"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[lt-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function lt&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function lt&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function lt&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[lt-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(Series,Series)-right]" time="0.002"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[le-(Series,Series)-right]&gt;&gt;, args = (0    1
dtype: int64, 0    1
dtype: int64), annotate = 'right', all_binary_operators = &lt;built-in function le&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(DataFrame,DataFrame)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(DataFrame,DataFrame)-right]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[le-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function le&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(DataFrame,DataFrame)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function le&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(Series,DataFrame)-right]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function le&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[le-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(Series,Series)-right]" time="0.002"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[gt-(Series,Series)-right]&gt;&gt;, args = (0    1
dtype: int64, 0    1
dtype: int64), annotate = 'right', all_binary_operators = &lt;built-in function gt&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(DataFrame,DataFrame)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(DataFrame,DataFrame)-right]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[gt-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function gt&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function gt&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(DataFrame,Series)-right]" time="0.006"><skipped type="pytest.xfail" message="&lt;built-in function gt&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[gt-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(Series,Series)-right]" time="0.002"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[ge-(Series,Series)-right]&gt;&gt;, args = (0    1
dtype: int64, 0    1
dtype: int64), annotate = 'right', all_binary_operators = &lt;built-in function ge&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(DataFrame,DataFrame)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(DataFrame,DataFrame)-right]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[ge-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function ge&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(Series,DataFrame)-left]" time="0.006"><skipped type="pytest.xfail" message="&lt;built-in function ge&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(DataFrame,Series)-left]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function ge&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ge-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(Series,Series)-right]" time="0.002"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[and_-(Series,Series)-right]&gt;&gt;, args = (0    1
dtype: int64, 0    1
dtype: int64), annotate = 'right', all_binary_operators = &lt;built-in function and_&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(DataFrame,DataFrame)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(DataFrame,DataFrame)-right]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[and_-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function and_&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(Series,DataFrame)-left]" time="0.008"><skipped type="pytest.xfail" message="&lt;built-in function and_&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function and_&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[and_-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(DataFrame,int)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(Series,Series)-left]" time="0.002"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[rand_-(Series,Series)-left]&gt;&gt;, args = (0    1
dtype: int64, 0    1
dtype: int64), annotate = 'left'
all_binary_operators = &lt;function rand_ at 0x7fb91b30cb80&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(DataFrame,DataFrame)-left]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[rand_-(DataFrame,DataFrame)-left]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'left', all_binary_operators = &lt;function rand_ at 0x7fb91b30cb80&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(DataFrame,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(DataFrame,DataFrame)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(Series,DataFrame)-left]" time="0.008"><skipped type="pytest.xfail" message="&lt;function rand_ at 0x7fb91b30cb80&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;function rand_ at 0x7fb91b30cb80&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rand_-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(Series,Series)-right]" time="0.002"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[xor-(Series,Series)-right]&gt;&gt;, args = (0    1
dtype: int64, 0    1
dtype: int64), annotate = 'right', all_binary_operators = &lt;built-in function xor&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(DataFrame,DataFrame)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(DataFrame,DataFrame)-right]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[xor-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function xor&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;built-in function xor&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(DataFrame,Series)-right]" time="0.006"><skipped type="pytest.xfail" message="&lt;built-in function xor&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[xor-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(DataFrame,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(Series,Series)-left]" time="0.002"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[rxor-(Series,Series)-left]&gt;&gt;, args = (0    1
dtype: int64, 0    1
dtype: int64), annotate = 'left'
all_binary_operators = &lt;function rxor at 0x7fb91b30cca0&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(DataFrame,DataFrame)-left]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[rxor-(DataFrame,DataFrame)-left]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'left', all_binary_operators = &lt;function rxor at 0x7fb91b30cca0&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(DataFrame,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(Series,DataFrame)-left]" time="0.007"><skipped type="pytest.xfail" message="&lt;function rxor at 0x7fb91b30cca0&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(DataFrame,Series)-right]" time="0.007"><skipped type="pytest.xfail" message="&lt;function rxor at 0x7fb91b30cca0&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[rxor-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(DataFrame,int)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(Series,Series)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(Series,Series)-right]" time="0.002"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[or_-(Series,Series)-right]&gt;&gt;, args = (0    1
dtype: int64, 0    1
dtype: int64), annotate = 'right', all_binary_operators = &lt;built-in function or_&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(DataFrame,DataFrame)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(DataFrame,DataFrame)-right]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[or_-(DataFrame,DataFrame)-right]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'right', all_binary_operators = &lt;built-in function or_&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(DataFrame,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(Series,DataFrame)-left]" time="0.006"><skipped type="pytest.xfail" message="&lt;built-in function or_&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(DataFrame,Series)-left]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(DataFrame,Series)-right]" time="0.006"><skipped type="pytest.xfail" message="&lt;built-in function or_&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[or_-(DataFrame,Series)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(int,Series)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(int,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(int,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(int,DataFrame)-left]" time="0.001"><skipped type="pytest.skip" message="left is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:503: left is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(int,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(int,DataFrame)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(Series,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(Series,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(Series,int)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(DataFrame,int)-left]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(DataFrame,int)-right]" time="0.001"><skipped type="pytest.skip" message="right is an int and doesn't support .attrs">/Users/gabriel/Documents/KTH4/DD2480 Software Engineering Fundamentals/Assignment 4/pandas/pandas/tests/generic/test_finalize.py:505: right is an int and doesn't support .attrs</skipped></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(DataFrame,int)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(Series,Series)-left]" time="0.002"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[ror_-(Series,Series)-left]&gt;&gt;, args = (0    1
dtype: int64, 0    1
dtype: int64), annotate = 'left'
all_binary_operators = &lt;function ror_ at 0x7fb91b30cc10&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(Series,Series)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(Series,Series)-both]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(DataFrame,DataFrame)-left]" time="0.004"><failure message="AssertionError: assert {} == {'a': 1}&#10;  Right contains 1 more item:&#10;  {'a': 1}&#10;  Use -v to get more diff">request = &lt;FixtureRequest for &lt;Function test_binops[ror_-(DataFrame,DataFrame)-left]&gt;&gt;, args = (   A
0  1,    A
0  1), annotate = 'left', all_binary_operators = &lt;function ror_ at 0x7fb91b30cc10&gt;

    @pytest.mark.parametrize("annotate", ["left", "right", "both"])
    @pytest.mark.parametrize(
        "args",
        [
            (1, pd.Series([1])),
            (1, pd.DataFrame({"A": [1]})),
            (pd.Series([1]), 1),
            (pd.DataFrame({"A": [1]}), 1),
            (pd.Series([1]), pd.Series([1])),
            (pd.DataFrame({"A": [1]}), pd.DataFrame({"A": [1]})),
            (pd.Series([1]), pd.DataFrame({"A": [1]})),
            (pd.DataFrame({"A": [1]}), pd.Series([1])),
        ],
        ids=lambda x: f"({type(x[0]).__name__},{type(x[1]).__name__})",
    )
    def test_binops(request, args, annotate, all_binary_operators):
        # This generates 624 tests... Is that needed?
        left, right = args
        if isinstance(left, (pd.DataFrame, pd.Series)):
            left.attrs = {}
        if isinstance(right, (pd.DataFrame, pd.Series)):
            right.attrs = {}
    
        if annotate == "left" and isinstance(left, int):
            pytest.skip("left is an int and doesn't support .attrs")
        if annotate == "right" and isinstance(right, int):
            pytest.skip("right is an int and doesn't support .attrs")
    
        if not (isinstance(left, int) or isinstance(right, int)) and annotate != "both":
            if not all_binary_operators.__name__.startswith("r"):
                """ if annotate == "right" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when right has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
            else:
                """ if annotate == "left" and isinstance(left, type(right)):
                    request.node.add_marker(
                        pytest.mark.xfail(
                            reason=f"{all_binary_operators} doesn't work when left has "
                            f"attrs and both are {type(left)}"
                        )
                    ) """
                if not isinstance(left, type(right)):
                    if annotate == "right" and isinstance(right, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
                    elif annotate == "left" and isinstance(left, pd.Series):
                        request.node.add_marker(
                            pytest.mark.xfail(
                                reason=f"{all_binary_operators} doesn't work when the "
                                "objects are different Series has attrs"
                            )
                        )
        if annotate in {"left", "both"} and not isinstance(left, int):
            left.attrs = {"a": 1}
        if annotate in {"right", "both"} and not isinstance(right, int):
            right.attrs = {"a": 1}
    
        is_cmp = all_binary_operators in [
            operator.eq,
            operator.ne,
            operator.gt,
            operator.ge,
            operator.lt,
            operator.le,
        ]
        if is_cmp and isinstance(left, pd.DataFrame) and isinstance(right, pd.Series):
            # in 2.0 silent alignment on comparisons was removed xref GH#28759
            left, right = left.align(right, axis=1, copy=False)
        elif is_cmp and isinstance(left, pd.Series) and isinstance(right, pd.DataFrame):
            right, left = right.align(left, axis=1, copy=False)
    
        result = all_binary_operators(left, right)
&gt;       assert result.attrs == {"a": 1}
E       AssertionError: assert {} == {'a': 1}
E         Right contains 1 more item:
E         {'a': 1}
E         Use -v to get more diff

pandas/tests/generic/test_finalize.py:574: AssertionError</failure></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(DataFrame,DataFrame)-right]" time="0.001" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(DataFrame,DataFrame)-both]" time="0.002" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(Series,DataFrame)-left]" time="0.006"><skipped type="pytest.xfail" message="&lt;function ror_ at 0x7fb91b30cc10&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(Series,DataFrame)-right]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(Series,DataFrame)-both]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(DataFrame,Series)-left]" time="0.003" /><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(DataFrame,Series)-right]" time="0.006"><skipped type="pytest.xfail" message="&lt;function ror_ at 0x7fb91b30cc10&gt; doesn't work when the objects are different Series has attrs" /></testcase><testcase classname="pandas.tests.generic.test_finalize" name="test_binops[ror_-(DataFrame,Series)-both]" time="0.003" /></testsuite></testsuites>